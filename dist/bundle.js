!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){void 0===e&&(e="1.0"),this._versionLevels=[];var t=e.split(".");for(var n in t)this._versionLevels.push(+t[n])}return Object.defineProperty(e.prototype,"versionLevels",{get:function(){return this._versionLevels},enumerable:!0,configurable:!0}),e.prototype.equalTo=function(e){if(e.versionLevels.length!==this._versionLevels.length)return!1;for(var t=0;t<this._versionLevels.length;t++)if(e.versionLevels[t]!==this._versionLevels[t])return!1;return!0},e.prototype.isLowerThan=function(e){for(var t=0;t<this._versionLevels.length;t++){if(this._versionLevels[t]>e.versionLevels[t])return!1;if(this._versionLevels[t]<e.versionLevels[t])return!0}return!1},e.prototype.toString=function(){return this._versionLevels.join(".")},e}();t.SettingsVersion=i},function(e,t,n){"use strict";var i,r=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(2),s=function(e){function t(t){var n=e.call(this)||this;if(n._version=new o.SettingsVersion("1.0"),n._settings={build_date:new a.Setting("",(function(e){return!0})),build_version:new a.Setting("",(function(e){return!0})),settings_version:new a.Setting("1.0",(function(e){return!0})),ambientOcclusion:new a.Setting(!0,(function(e){return!0})),autoRotateSpeed:new a.Setting(0,(function(e){return!0})),bumpAmplitude:new a.Setting(1,(function(e){return!0})),camera:new a.Setting({position:new a.Setting({x:0,y:0,z:0},(function(e){return!0})),target:new a.Setting({x:0,y:0,z:0},(function(e){return!0}))},(function(e){return!0})),cameraAutoAdjust:new a.Setting(!1,(function(e){return!0})),cameraMovementDuration:new a.Setting(0,(function(e){return!0})),cameraOrtho:new a.Setting({position:new a.Setting({x:0,y:0,z:0},(function(e){return!0})),target:new a.Setting({x:0,y:0,z:0},(function(e){return!0}))},(function(e){return!0})),cameraRevertAtMouseUp:new a.Setting(!1,(function(e){return!0})),clearAlpha:new a.Setting(1,(function(e){return!0})),clearColor:new a.Setting("#ffffff",(function(e){return!0})),commitParameters:new a.Setting(!1,(function(e){return!0})),controlDamping:new a.Setting(.1,(function(e){return!0})),controlNames:new a.Setting(null,(function(e){return function(e){return!0}})),controlOrder:new a.Setting(null,(function(e){return function(e){return!0}})),defaultMaterialColor:new a.Setting("#d3d3d3",(function(e){return!0})),disablePan:new a.Setting(!1,(function(e){return!0})),disableZoom:new a.Setting(!1,(function(e){return!0})),enableAutoRotate:new a.Setting(!1,(function(e){return!0})),enableRotation:new a.Setting(!0,(function(e){return!0})),environmentMap:new a.Setting("none",(function(e){return!0})),environmentMapResolution:new a.Setting("1024",(function(e){return!0})),fov:new a.Setting(45,(function(e){return!0})),lightScene:new a.Setting("default",(function(e){return!0})),lightScenes:new a.Setting(null,(function(e){return!0})),panSpeed:new a.Setting(.5,(function(e){return!0})),parametersHidden:new a.Setting(null,(function(e){return function(e){return!0}})),pointSize:new a.Setting(1,(function(e){return!0})),revertAtMouseUpDuration:new a.Setting(800,(function(e){return!0})),rotateSpeed:new a.Setting(.25,(function(e){return!0})),showEnvironmentMap:new a.Setting(!1,(function(e){return!0})),showGrid:new a.Setting(!1,(function(e){return!0})),showGroundPlane:new a.Setting(!1,(function(e){return!0})),showShadows:new a.Setting(!0,(function(e){return!0})),topView:new a.Setting(!1,(function(e){return!0})),zoomExtentFactor:new a.Setting(1,(function(e){return!0})),zoomSpeed:new a.Setting(1,(function(e){return!0}))},t){if(t.clearAlpha&&t.clearColor||!t.backgroundColor||"string"!=typeof t.backgroundColor||(t.clearAlpha=t.backgroundColor.substring(0,8),t.clearColor=t.backgroundColor.substring(8)),t.defaultMaterialColor&&Array.isArray(t.defaultMaterialColor)){for(var i="#",r=0;r<t.defaultMaterialColor.length;r++)i+=Number(t.defaultMaterialColor[r]).toString(16);t.defaultMaterialColor=i}n._fromJSON(t,n._settings)}return n}return r(t,e),t.prototype.convertFromPreviousVersion=function(e){return this},t.prototype.convertToPreviousVersion=function(){return this},t}(n(3).BaseSettings);t.Settings=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,n,i){void 0===i&&(i=!0),this._value=e,this._type=t,this._desc=n,this._persistent=i}return Object.defineProperty(e.prototype,"desc",{get:function(){return this._desc},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"persistent",{get:function(){return this._persistent},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(e){this._value=e},enumerable:!0,configurable:!0}),e}();t.Setting=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=function(){function e(){}return Object.defineProperty(e.prototype,"settings",{get:function(){return this._settings},set:function(e){this._settings=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getSettingDefinitions=function(){var e={};return this._getSettingDefinitions(this._settings,e,""),e},e.prototype.getSettingObject=function(e){for(var t=e.split("."),n=this._settings,r=0;r<t.length;r++)if((n=n[t[r]])instanceof i.Setting&&r<t.length-1)n=n.value;else{if(n instanceof i.Setting)return n;if(!n)return}},e.prototype.getSettings=function(){var e={};return this._getSettings(this._settings,e,""),e},e.prototype.toJSON=function(){return this._toJSON(this._settings)},e.prototype._fromJSON=function(e,t){if(e)for(var n in t)if(t[n]instanceof i.Setting){var r=t[n];if(r.persistent){var o="object"==typeof r.value&&null!==r.value?Object.values(r.value):[];0!==o.length&&o[0]instanceof i.Setting?this._fromJSON(e[n],t[n].value):void 0!==e[n]&&(t[n].value=e[n])}}else this._fromJSON(e[n],t[n])},e.prototype._toJSON=function(e){var t={};for(var n in e)if(e[n]instanceof i.Setting){var r=e[n];if(r.persistent){var o="object"==typeof r.value&&null!==r.value?Object.values(r.value):[];0!==o.length&&o[0]instanceof i.Setting?t[n]=this._toJSON(e[n].value):t[n]=e[n].value}}else e[n]instanceof String||"string"==typeof e[n]?t[n]=e[n]:t[n]=this._toJSON(e[n]);return t},e.prototype._getSettingDefinitions=function(e,t,n){var r=n?n+".":"";for(var o in e)if(e[o]instanceof i.Setting){var a=e[o],s="object"==typeof a.value&&null!==a.value?Object.values(a.value):[];0!==s.length&&s[0]instanceof i.Setting?(e[o].desc&&(t[r+o]={},t[r+o].descripton=e[o].desc,("string"==typeof e[o].type||e[o].type instanceof String)&&(t[r+o].type=e[o].type)),this._getSettingDefinitions(e[o].value,t,r+o)):e[o].desc&&(t[r+o]={},t[r+o].descripton=e[o].desc,("string"==typeof e[o].type||e[o].type instanceof String)&&(t[r+o].type=e[o].type))}else e[o]instanceof String||"string"==typeof e[o]||this._getSettingDefinitions(e[o],t,r+o)},e.prototype._getSettings=function(e,t,n){var r=n?n+".":"";for(var o in e)if(e[o]instanceof i.Setting){var a=e[o];if(a.persistent){var s="object"==typeof a.value&&null!==a.value?Object.values(a.value):[];0!==s.length&&s[0]instanceof i.Setting?this._getSettings(e[o].value,t,r+o):t[r+o]=e[o].value}}else e[o]instanceof String||"string"==typeof e[o]?t[r+o]=e[o]:this._getSettings(e[o],t,r+o)},e}();t.BaseSettings=r},function(e,t,n){"use strict";var i,r=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),a=n(2),s=n(1),u=function(e){function t(t){var n=e.call(this)||this;return n._version=new o.SettingsVersion("2.0"),n._settings={build_date:new a.Setting("","string","",!1),build_version:new a.Setting("","string","",!1),settings_version:new a.Setting("2.0","string","",!1),ar:{enableCameraSync:new a.Setting(!1,"boolean","Enable / disable synchronisation of the camera with AR tracking information. Enabling this will disable the orbit controls.",!1),enableCameraSyncInitial:new a.Setting(!1,"boolean","Enable / disable the inital synchronisation of the camera with AR tracking information. Enabling this will disable the orbit controls."),enableLightingEstimation:new a.Setting(!0,"boolean","Enable / disable automatic lighting estimation. Enabling this stores the current state of the lights which will get restored once automatic lighting estimation gets disabled again."),enableTouchControls:new a.Setting(!0,"boolean","Enable / disable touch controls for placement of objects in the AR scene while AR camera synchronisation is enabled."),enableTouchControlRotation:new a.Setting(!0,"boolean","Enable / disable rotation of objects in the AR scene by means of touch controls. Typically this should be enabled for objects to be placed horizontally."),enableAutomaticPlacement:new a.Setting(!0,"boolean","Enable / disable initial automatic placement of objects in the AR scene as soon as plane anchors get detected. Automatic placement stops once the user starts to interact."),defaultHitTestType:new a.Setting("existingPlaneUsingGeometry",(function(e){return["featurePoint","estimatedHorizontalPlane","estimatedVerticalPlane","existingPlane","existingPlaneUsingExtent","existingPlaneUsingGeometry"].includes(e)}),"Default type of feature to use for hit tests, used by touch controls. ")},defaultMaterial:{bumpAmplitude:new a.Setting(1,"notnegative","Bump amplitude of the default material"),color:new a.Setting("#d3d3d3","string","Color of the default material"),metalness:new a.Setting(0,"factor","Metalness of the default material"),roughness:new a.Setting(1,"factor","Roughness of the default material")},parameters:{controlOrder:new a.Setting([],"stringarray",""),controlNames:new a.Setting([],"stringarray",""),parametersHidden:new a.Setting([],"stringarray","")},viewer:{blurSceneWhenBusy:new a.Setting(!0,"boolean","Blur or don't blur the scene while a process is busy"),ignoreSuperseded:new a.Setting(!0,"boolean","Ignore intermediate solutions which at the time of their arrival have already been superseded by another customization request",!1),loggingLevel:new a.Setting(-1,(function(e){return e>=-1&&e<=3}),"Level of log messages shown on the console, allowed values: -1 (none), 0 (error), 1 (warn), 2 (info), 3 (debug)",!1),messageLoggingLevel:new a.Setting(-1,(function(e){return e>=-1&&e<=3}),"Log level to be used for logging internal messages, allowed values: -1 (none), 0 (error), 1 (warn), 2 (info), 3 (debug)",!1),showMessages:new a.Setting(!0,"boolean","Show or don't show user messages in the viewport",!1),hasRestoredSettings:new a.Setting(!1,"boolean","True if settings have been restored from a settings object delivered by a CommPlugin",!1),commitParameters:new a.Setting(!1,"boolean","Use or don't commit mode for parameters"),commitSettings:new a.Setting(!1,"boolean","Use or don't commit mode for settings"),viewerRuntimeId:new a.Setting("","string","The runtime id of this viewer",!1),scene:{show:new a.Setting(!1,"boolean","Show / hide the scene",!1),showSceneTransition:new a.Setting("1s","string",""),camera:{autoAdjust:new a.Setting(!1,"boolean","Enable / disable that the camera adjusts to geometry updates"),cameraMovementDuration:new a.Setting(800,"notnegative","Default duration of camera movements"),cameraTypes:{perspective:{default:new a.Setting({position:new a.Setting({x:0,y:0,z:0},"vector3any","Default position for the perspective camera"),target:new a.Setting({x:0,y:0,z:0},"vector3any","Default target for the perspective camera")},(function(e){return!0}),"Default position and target for the perspective camera"),fov:new a.Setting(45,"notnegative","Camera frustum vertical field of view angle, unit degree, interval [0,180]"),controls:new a.Setting(0,(function(e){return 0===e||1===e}),"Set camera control type")},orthographic:{default:new a.Setting({position:new a.Setting({x:0,y:0,z:0},"vector3any","Default position for the orthographic camera"),target:new a.Setting({x:0,y:0,z:0},"vector3any","Default target for the orthographic camera")},(function(e){return!0}),"Default position and target for the orthographic camera")},active:new a.Setting(0,(function(e){return e>=0&&e<=6}),"Set camera type")},controls:{orbit:{autoRotationSpeed:new a.Setting(0,"number","Speed of autoration, can be negative, also refer to enableAutoRotation"),damping:new a.Setting(.1,"notnegative","How much to damp camera movements by the user"),enableAutoRotation:new a.Setting(!1,"boolean","Enable / disable automatic rotation of the camera, also refer to autoRotationSpeed"),enableKeyPan:new a.Setting(!1,"boolean","Enable / disable panning using the keyboard, also refer to enablePan"),enablePan:new a.Setting(!0,"boolean","Enable / disable panning in general, also refer to enableKeyPan"),enableRotation:new a.Setting(!0,"boolean","Enable / disable camera rotation"),enableZoom:new a.Setting(!0,"boolean","Enable / disable zooming"),input:new a.Setting({keys:{up:38,down:40,left:37,right:39},mouse:{rotate:0,zoom:1,pan:2},touch:{rotate:1,zoom:2,pan:3}},"any"),keyPanSpeed:new a.Setting(.5,"factor","Speed of panning when using the keyboard"),movementSmoothness:new a.Setting(.5,"factor","How much to the current movement is affected by the previous one"),restrictions:{position:{cube:new a.Setting({min:new a.Setting({x:-1/0,y:-1/0,z:-1/0},"vector3any","Restriction of the camera position inside a cube, minimum corner of the cube"),max:new a.Setting({x:1/0,y:1/0,z:1/0},"vector3any","Restriction of the camera position inside a cube, maximum corner of the cube")},(function(e){return!0}),"Restriction of the camera position inside a cube, minimum and maximum corner of the cube"),sphere:new a.Setting({center:new a.Setting({x:0,y:0,z:0},"vector3any","Restriction of the camera position inside a sphere, center of the sphere"),radius:new a.Setting(1/0,"notnegative","Restriction of the camera position inside a sphere, radius of the sphere")},(function(e){return!0}),"Restriction of the camera position inside a sphere, center and radius of the sphere")},target:{cube:new a.Setting({min:new a.Setting({x:-1/0,y:-1/0,z:-1/0},"vector3any","Restriction of the camera target inside a cube, minimum corner of the cube"),max:new a.Setting({x:1/0,y:1/0,z:1/0},"vector3any","Restriction of the camera target inside a cube, maximum corner of the cube")},(function(e){return!0}),"Restriction of the camera target inside a cube, minimum and maximum corner of the cube"),sphere:new a.Setting({center:new a.Setting({x:0,y:0,z:0},"vector3any","Restriction of the camera target inside a sphere, center of the sphere"),radius:new a.Setting(1/0,"notnegative","Restriction of the camera target inside a sphere, radius of the sphere")},(function(e){return!0}),"Restriction of the camera target inside a sphere, center and radius of the sphere")},rotation:new a.Setting({minPolarAngle:new a.Setting(0,(function(e){return!0}),"Minimum polar angle of the camera position with respect to the camera target, unit degree, interval [0,180]"),maxPolarAngle:new a.Setting(180,(function(e){return!0}),"Maximum polar angle of the camera position with respect to the camera target, unit degree, interval [0,180]"),minAzimuthAngle:new a.Setting(-1/0,"number","Minimum azimuth angle of the camera position with respect to the camera target, unit degree, interval [-180,180]"),maxAzimuthAngle:new a.Setting(1/0,"number","Maximum azimuth angle of the camera position with respect to the camera target, unit degree, interval [-180,180]")},(function(e){return!0}),"Minimum and maximum polar and azimuth angle of the camera position with respect to the camera target, unit degree"),zoom:new a.Setting({minDistance:new a.Setting(0,"notnegative","Minimum distance between camera position and target"),maxDistance:new a.Setting(1/0,"notnegative","Maximum distance between camera position and target")},(function(e){return!0}),"Minimum and maximum distance between camera position and target")},rotationSpeed:new a.Setting(.5,"factor","Speed of camera rotation"),panSpeed:new a.Setting(.5,"factor","Speed of panning"),zoomSpeed:new a.Setting(.5,"factor","Speed of zooming")},fps:{},orthographic:{damping:new a.Setting(.1,"notnegative","How much to damp camera movements by the user"),enableKeyPan:new a.Setting(!1,"boolean","Enable / disable panning using the keyboard, also refer to enablePan"),enablePan:new a.Setting(!0,"boolean","Enable / disable panning in general, also refer to enableKeyPan"),enableZoom:new a.Setting(!0,"boolean","Enable / disable zooming"),input:new a.Setting({keys:{up:38,down:40,left:37,right:39},mouse:{rotate:0,zoom:1,pan:2},touch:{rotate:1,zoom:2,pan:3}},"any"),keyPanSpeed:new a.Setting(.5,"factor","Speed of panning when using the keyboard"),movementSmoothness:new a.Setting(.5,"factor","How much to the current movement is affected by the previous one"),panSpeed:new a.Setting(.5,"factor","Speed of panning"),zoomSpeed:new a.Setting(.5,"factor","Speed of zooming")}},enableCameraControls:new a.Setting(!0,"boolean","Enable / disable camera controls"),revertAtMouseUp:new a.Setting(!1,"boolean","Enable / disable if the mouse should reset on mouse up"),revertAtMouseUpDuration:new a.Setting(800,"notnegative","The duration of the transition of the revertAtMouseUp"),zoomExtentsFactor:new a.Setting(1,"number","Factor to apply to the bounding box before zooming to extents")},duration:new a.Setting(0,"notnegative","Set fade in / fade out duration"),fullscreen:new a.Setting(!1,"boolean","Enable / disable fullscreen mode",!1),gridVisibility:new a.Setting(!0,"boolean","Show / hide the grid"),groundPlaneReflectionThreshold:new a.Setting(.01,"notnegative","Allows to control the distance to objects that are still reflected by the groundplane"),groundPlaneReflectionVisibility:new a.Setting(!1,"boolean","Enable / disable the reflectivity of the groundplane"),groundPlaneVisibility:new a.Setting(!0,"boolean","Show / hide the ground plane"),lights:{helper:new a.Setting(!1,"boolean","Show / hide the light helpers"),lightScene:new a.Setting("default","string"),lightScenes:new a.Setting({},"any")},material:{environmentMap:new a.Setting("none",(function(e){return!0}),"Name of the environment map to use, or an array of 6 image URLs making up the cube mapped environment map (px, nx, pz, nz, py, ny)"),environmentMapAsBackground:new a.Setting(!1,"boolean","Show / hide the environment map in the background"),environmentMapResolution:new a.Setting("1024",(function(e){return["256","512","1024","2048"].includes(e)}),"Image resolution to be used for the named environment maps (available resolutions: 256, 512, 1024)")},render:{ambientOcclusion:new a.Setting(!0,"boolean","Enable / disable ambient occlusion for rendering"),beautyRenderDelay:new a.Setting(50,"notnegative","Amount of which the beauty rendering is delayed"),clearColor:new a.Setting("#ffffff","string","Set background color"),clearAlpha:new a.Setting(1,"factor","Set background alpha value"),pointSize:new a.Setting(1,"notnegative","Set size of point objects"),shadows:new a.Setting(!0,"boolean","Enable / disable shadows for rendering"),sao:{samples:new a.Setting(8,"notnegative"),intensity:new a.Setting(.1,"notnegative"),kernelRadius:new a.Setting(8,"notnegative"),standardDev:new a.Setting(25,"notnegative")}}}}},t&&n._fromJSON(t,n._settings),n}return r(t,e),t.prototype.convertFromPreviousVersion=function(e){var t=e.settings;return this._settings.viewer.scene.render.clearAlpha.value=t.clearAlpha.value,this._settings.viewer.scene.render.clearColor.value=t.clearColor.value,this._settings.defaultMaterial.color.value=t.defaultMaterialColor.value,this._settings.build_date.value=t.build_date.value,this._settings.build_version.value=t.build_version.value,5===t.camera.value.position.value.x&&5===t.camera.value.position.value.y&&5===t.camera.value.position.value.z&&0===t.camera.value.target.value.x&&0===t.camera.value.target.value.y&&0===t.camera.value.target.value.z||(this._settings.viewer.scene.camera.cameraTypes.perspective.default.value.position.value=t.camera.value.position.value,this._settings.viewer.scene.camera.cameraTypes.perspective.default.value.target.value=t.camera.value.target.value),5===t.cameraOrtho.value.position.value.x&&5===t.cameraOrtho.value.position.value.y&&5===t.cameraOrtho.value.position.value.z&&0===t.cameraOrtho.value.target.value.x&&0===t.cameraOrtho.value.target.value.y&&0===t.cameraOrtho.value.target.value.z||(this._settings.viewer.scene.camera.cameraTypes.orthographic.default.value.position.value=t.cameraOrtho.value.position.value,this._settings.viewer.scene.camera.cameraTypes.orthographic.default.value.target.value=t.cameraOrtho.value.target.value),this._settings.viewer.scene.render.ambientOcclusion.value=t.ambientOcclusion.value,this._settings.viewer.scene.camera.controls.orbit.autoRotationSpeed.value=t.autoRotateSpeed.value,this._settings.defaultMaterial.bumpAmplitude.value=t.bumpAmplitude.value,this._settings.viewer.scene.camera.autoAdjust.value=t.cameraAutoAdjust.value,this._settings.viewer.scene.camera.cameraMovementDuration.value=t.cameraMovementDuration.value,this._settings.viewer.scene.camera.revertAtMouseUp.value=t.cameraRevertAtMouseUp.value,this._settings.viewer.commitParameters.value=t.commitParameters.value,this._settings.viewer.scene.camera.controls.orbit.damping.value=t.controlDamping.value,this._settings.viewer.scene.camera.controls.orthographic.damping.value=t.controlDamping.value,this._settings.parameters.controlNames.value=t.controlNames.value,this._settings.parameters.controlOrder.value=t.controlOrder.value,this._settings.viewer.scene.camera.controls.orbit.enablePan.value=!t.disablePan.value,this._settings.viewer.scene.camera.controls.orthographic.enablePan.value=!t.disablePan.value,this._settings.viewer.scene.camera.controls.orbit.enableZoom.value=!t.disableZoom.value,this._settings.viewer.scene.camera.controls.orthographic.enableZoom.value=!t.disableZoom.value,this._settings.viewer.scene.camera.controls.orbit.enableAutoRotation.value=t.enableAutoRotate.value,this._settings.viewer.scene.camera.controls.orbit.enableRotation.value=t.enableRotation.value,this._settings.viewer.scene.material.environmentMap.value=t.environmentMap.value,this._settings.viewer.scene.material.environmentMapResolution.value=t.environmentMapResolution.value,this._settings.viewer.scene.camera.cameraTypes.perspective.fov.value=t.fov.value,this._settings.viewer.scene.lights.lightScene.value=t.lightScene.value,this._settings.viewer.scene.lights.lightScenes.value=t.lightScenes.value,this._settings.parameters.parametersHidden.value=t.parametersHidden.value,this._settings.viewer.scene.render.pointSize.value=t.pointSize.value,this._settings.viewer.scene.camera.revertAtMouseUpDuration.value=t.revertAtMouseUpDuration.value,this._settings.viewer.scene.material.environmentMapAsBackground.value=t.showEnvironmentMap.value,this._settings.viewer.scene.gridVisibility.value=t.showGrid.value,this._settings.viewer.scene.groundPlaneVisibility.value=t.showGroundPlane.value,this._settings.viewer.scene.render.shadows.value=t.showShadows.value,t.topView.value&&(this._settings.viewer.scene.camera.cameraTypes.active.value=1),this._settings.viewer.scene.camera.zoomExtentsFactor.value=t.zoomExtentFactor.value,this},t.prototype.convertToPreviousVersion=function(){var e=new s.Settings;return e.settings.build_date.value=this._settings.build_date.value,e.settings.build_version.value=this._settings.build_version.value,e.settings.ambientOcclusion.value=this._settings.viewer.scene.render.ambientOcclusion.value,e.settings.autoRotateSpeed.value=this._settings.viewer.scene.camera.controls.orbit.autoRotationSpeed.value,e.settings.bumpAmplitude.value=this._settings.defaultMaterial.bumpAmplitude.value,e.settings.camera.value=new a.Setting({position:this._settings.viewer.scene.camera.cameraTypes.perspective.default.value.position.value,target:this._settings.viewer.scene.camera.cameraTypes.perspective.default.value.target.value},(function(e){return!0})).value,e.settings.cameraAutoAdjust.value=this._settings.viewer.scene.camera.autoAdjust.value,e.settings.cameraMovementDuration.value=this._settings.viewer.scene.camera.cameraMovementDuration.value,e.settings.cameraOrtho.value=new a.Setting({position:this._settings.viewer.scene.camera.cameraTypes.orthographic.default.value.position.value,target:this._settings.viewer.scene.camera.cameraTypes.orthographic.default.value.target.value},(function(e){return!0})).value,e.settings.cameraRevertAtMouseUp.value=this._settings.viewer.scene.camera.revertAtMouseUp.value,e.settings.clearAlpha.value=this._settings.viewer.scene.render.clearAlpha.value,e.settings.clearColor.value=this._settings.viewer.scene.render.clearColor.value,e.settings.commitParameters.value=this._settings.viewer.commitParameters.value,e.settings.controlDamping.value=this._settings.viewer.scene.camera.controls.orbit.damping.value,e.settings.controlNames.value=this._settings.parameters.controlNames.value,e.settings.controlOrder.value=this._settings.parameters.controlOrder.value,e.settings.defaultMaterialColor.value=this._settings.defaultMaterial.color.value,e.settings.disablePan.value=!this._settings.viewer.scene.camera.controls.orbit.enablePan.value,e.settings.disableZoom.value=!this._settings.viewer.scene.camera.controls.orbit.enableZoom.value,e.settings.enableAutoRotate.value=this._settings.viewer.scene.camera.controls.orbit.enableAutoRotation.value,e.settings.enableRotation.value=this._settings.viewer.scene.camera.controls.orbit.enableRotation.value,e.settings.environmentMap.value=this._settings.viewer.scene.material.environmentMap.value,e.settings.environmentMapResolution.value=this._settings.viewer.scene.material.environmentMapResolution.value,e.settings.fov.value=this._settings.viewer.scene.camera.cameraTypes.perspective.fov.value,e.settings.lightScene.value=this._settings.viewer.scene.lights.lightScene.value,e.settings.lightScenes.value=this._settings.viewer.scene.lights.lightScenes.value,e.settings.panSpeed.value=this._settings.viewer.scene.camera.controls.orbit.panSpeed.value,e.settings.parametersHidden.value=this._settings.parameters.parametersHidden.value,e.settings.pointSize.value=this._settings.viewer.scene.render.pointSize.value,e.settings.revertAtMouseUpDuration.value=this._settings.viewer.scene.camera.revertAtMouseUpDuration.value,e.settings.rotateSpeed.value=this._settings.viewer.scene.camera.controls.orbit.rotationSpeed.value,e.settings.showEnvironmentMap.value=this._settings.viewer.scene.material.environmentMapAsBackground.value,e.settings.showGrid.value=this._settings.viewer.scene.gridVisibility.value,e.settings.showGroundPlane.value=this._settings.viewer.scene.groundPlaneVisibility.value,e.settings.showShadows.value=this._settings.viewer.scene.render.shadows.value,e.settings.topView.value=1===this._settings.viewer.scene.camera.cameraTypes.active.value,e.settings.zoomExtentFactor.value=this._settings.viewer.scene.camera.zoomExtentsFactor.value,e.settings.zoomSpeed.value=this._settings.viewer.scene.camera.controls.orbit.zoomSpeed.value,e},t}(n(3).BaseSettings);t.Settings=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(6);t.SettingsConversion=i.SettingsConversion;var r=n(1);t.Settings_1_0=r.Settings;var o=n(4);t.Settings_2_0=o.Settings},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),r=n(1),o=n(4),a=function(){function e(){this._settingsVersions=[],this._versions={"1.0":r.Settings,"2.0":o.Settings};for(var e=0,t=Object.keys(this._versions);e<t.length;e++){var n=t[e];this._settingsVersions.push(new this._versions[n])}}return e.prototype.convert=function(e,t){var n=this.createSettingsObject(e),r=n.version,o=new i.SettingsVersion(t),a=this._findVersionIndex(r),s=this._findVersionIndex(o);if(-1===a||-1===s)return n.toJSON();var u=n;if(a<s)for(;a<s;)a+=1,u=(new(this._versions[this._settingsVersions[a].version.toString()])).convertFromPreviousVersion(n);else if(a>s)for(;a>s;)a-=1,u=u.convertToPreviousVersion();return u.toJSON()},e.prototype.createSettingsObject=function(e){if(!e.settings_version)return new r.Settings(e);var t=new i.SettingsVersion(e.settings_version);return new(this._versions[t.toString()])(e)},e.prototype._findVersionIndex=function(e){for(var t=new i.SettingsVersion(e.toString()),n=0;n<this._settingsVersions.length;n++)if(this._settingsVersions[n].version.equalTo(t))return n;t.versionLevels[t.versionLevels.length-1]=0;for(n=0;n<this._settingsVersions.length;n++)if(this._settingsVersions[n].version.equalTo(t))return n;return-1},e}();t.SettingsConversion=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,